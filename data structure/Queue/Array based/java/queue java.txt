public class Queue {
    private int[] arr;
    private int first;
    private int last;
    private int size;
    private int capacity;

    public Queue() {
        capacity = 1;
        arr = new int[capacity];
        first = 0;
        last = -1;
        size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public void push(int val) {
        if (size == capacity) {
            int newCapacity = capacity * 2;
            int[] new_arr = new int[newCapacity];
            for (int i = 0; i < size; i++) {
                new_arr[i] = arr[i];
            }
            first = 0;
            last = size - 1;
            capacity = newCapacity;
            arr = new_arr;
        }

        last++;
        arr[last] = val;
        size++;
    }

    public void pop() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return;
        }

        first++;
        size--;
    }

    public int getFront() {
        if (!isEmpty()) {
            return arr[first];
        }
        return -1;
    }

    public int getBack() {
        if (!isEmpty()) {
            return arr[last];
        }
        return -1;
    }

    public int getSize() {
        return size;
    }

    public int getCapacity() {
        return capacity;
    }

    public void print() {
        while (!isEmpty()) {
            System.out.print(arr[first] + " ");
            pop();
        }
    }
    
    public static void main(String[] args) {
        Queue q = new Queue();
        q.push(5);
        q.push(4);
        q.push(6);

        q.print();
        System.out.println();
        System.out.println(q.getCapacity());
    }
}
